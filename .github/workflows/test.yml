name: Test Neovim Configuration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }} with Neovim ${{ matrix.neovim_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        neovim_version: ['stable', 'nightly']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ripgrep fd-find curl unzip

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ripgrep fd curl

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pynvim

      - name: Install Neovim
        uses: rhysd/action-setup-vim@v1
        with:
          neovim: true
          version: ${{ matrix.neovim_version }}

      - name: Verify Neovim installation
        run: |
          nvim --version
          which nvim

      - name: Create config directory
        run: |
          mkdir -p ~/.config

      - name: Install configuration
        run: |
          cp -r ${{ github.workspace }} ~/.config/nvim

      - name: Test configuration loading
        run: |
          nvim --headless +"lua print('Configuration loaded successfully')" +qa

      - name: Test plugin installation
        run: |
          timeout 300 nvim --headless +"Lazy! sync" +qa || true

      - name: Verify plugins are installed
        run: |
          nvim --headless +"lua if #require('lazy').plugins() > 0 then print('Plugins installed') else vim.cmd('cquit') end" +qa

      - name: Run health check
        run: |
          nvim --headless +"checkhealth" +"write! /tmp/health.log" +qa || true
          cat /tmp/health.log

      - name: Test LSP functionality
        run: |
          echo "print('Hello, World!')" > test.py
          nvim --headless test.py +"lua vim.defer_fn(function() print('LSP test completed') vim.cmd('qa') end, 3000)" || true

      - name: Test Telescope functionality
        run: |
          nvim --headless +"lua require('telescope.builtin').find_files(); vim.defer_fn(function() print('Telescope test completed') vim.cmd('qa') end, 2000)" || true

      - name: Test TreeSitter functionality
        run: |
          nvim --headless +"TSUpdate" +"lua vim.defer_fn(function() print('TreeSitter test completed') vim.cmd('qa') end, 5000)" || true

  lint:
    name: Lint Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Lua
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: "5.1"

      - name: Setup Luarocks
        uses: leafo/gh-actions-luarocks@v4

      - name: Install luacheck
        run: luarocks install luacheck

      - name: Lint Lua files
        run: |
          luacheck lua/ --globals vim --no-unused-args || true

      - name: Check for syntax errors
        run: |
          find lua/ -name "*.lua" -exec lua -c {} \; || true

  docs:
    name: Validate Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check README exists
        run: |
          test -f README.md
          test -f QUICK_START.md
          test -f CHEATSHEET.md

      - name: Validate markdown
        uses: DavidAnson/markdownlint-cli2-action@v13
        with:
          globs: '**/*.md'

      - name: Check install script
        run: |
          test -f install.sh
          test -x install.sh
          bash -n install.sh

  security:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for secrets
        run: |
          # Check for potential secrets in configuration files
          if grep -r "password\|secret\|token\|key" lua/ --exclude-dir=.git || true; then
            echo "Warning: Potential secrets found in configuration"
          fi

      - name: Validate shell scripts
        run: |
          if command -v shellcheck &> /dev/null; then
            shellcheck install.sh || true
          fi
